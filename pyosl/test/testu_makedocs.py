from pyosl import Factory, Ontology
from jinja2 import Template
import unittest
from pyosl.uml import (uml4_time, uml4_iso, uml4_drs, uml4_cmip, uml4_design, uml4_data, uml4_activity,
                       uml4_platform, uml4_science, uml4_shared, uml4_software)

from pyosl.uml import UmlBase
Factory.register(Ontology(UmlBase))


item_template = r"""
\begin{table}[!htbp] 
\begin{tcolorbox}[title={{name}}]
\begin{tabularx}{\linewidth}{lX}
{% for i,j in coreitems %}{{i}} & {{j}} \\ 
{% endfor %}\end{tabularx}
\tcblower
{% if properties %} properties:\\
\begin{tabularx}{\linewidth}{p{3cm}p{3cm}cX}
{% for p in properties %}{{p[0]}} & {{p[1]}} & {{p[2]}} & {{p[3]}} \\
{% endfor %}\end{tabularx}{% if derived %}
derived:\\
{% for d in derived %} {{d}} \\ {% endfor %}
{% endif %} {% if constraints %}
constraints:\\
{% for c in constraints %} {{c}} \\ {% endfor %}
{% endif %}{% elif members %}members:\\
\begin{tabularx}{\linewidth}{lX}
{% for m,d  in members %}{{m }} & {{d}} \\
{% endfor %}\end{tabularx}{% endif %}
\end{tcolorbox}
\caption[{{name}}]{ {{caption}} \label{ {{label}} } }
\end{table}

"""

doc_template = r"""\documentclass[a4paper]{article}
\usepackage[cm]{fullpage}
\usepackage{tcolorbox}
\usepackage{tabularx}
\usepackage{parskip}
\usepackage[colorinlistoftodos]{todonotes}
\usepackage[colorlinks=true, allcolors=blue]{hyperref}

\title{ES-DOC Ontology (Version {{version}}) }
\author{Autogenerated from the ES-DOC Schema Repository}
\setcounter{tocdepth}{2}
\renewcommand{\tablename}{Item}
\renewcommand{\listtablename}{Classes and Enumerations}
\usepackage[strings]{underscore}
\usepackage[english]{babel}
\begin{document}
\maketitle
\tableofcontents
\listoftables

{{ content }}

\end{document}
"""

fig_template = r"""
\clearpage
\section{ {{p|upper}} }
\centerline{\includegraphics[width=\textwidth, height=0.96\textheight, keepaspectratio=true]{ {{- pfile -}} }}
\clearpage
"""


DIAGRAMS = {
    'activity': uml4_activity,
    'data': uml4_data,
    'designing': uml4_design,
    'shared': uml4_shared,
    'iso': uml4_iso,
    'drs': uml4_drs,
    'platform': uml4_platform,
    'science': uml4_science,
    'software': uml4_software,
    'cmip': uml4_cmip,
    'time': uml4_time,
}


def tex_safe(s):
    s = str(s).replace('_',r'\textunderscore\-').replace('%',r'\%').replace('&',r'\&').replace('#',r'\#')
    return s.replace('.',r'.\-').rstrip()

def add_section(package):
    # regenerate diagrams
    DIAGRAMS[package]()
    d = Template(fig_template)
    pfile = f'test_output/doc_{package}.pdf'
    return d.render(p=package, pfile=pfile)

def make_documentation():

    content = ""

    t = Template(item_template)
    d = Template(doc_template)

    for p in Factory.ontology.constructors:

        content += add_section(p)
        for k in Factory.ontology.constructors[p]:
            c = Factory.ontology.constructors[p][k]
            avoid = ['base_hierarchy', 'cim_version', 'type_key', 'ontology_name', 'package',
                     'class_name', 'inherited_properties', 'alternatives']
            handled = ['properties', 'constraints', '__doc__', 'pstr', 'members', 'derived']
            coreitems = [(tex_safe(k), tex_safe(v)) for (k, v) in c.items() if k not in avoid+handled]
            if 'pstr' in c:
                pstr = c['pstr']
                coreitems.append(('pstr', r"'\verb|{}|', ".format(pstr[0])+str(pstr[1])))
            name = tex_safe(k)
            caption = f"{name}: {tex_safe(c['__doc__'])}"
            try:
                properties = [[tex_safe(i) for i in list(j)] for j in c['properties']]
                members = False
            except KeyError:
                properties = False
                members = [[tex_safe(i) for i in list(j)] for j in c['members']]
            try:
                constraints = [tex_safe(j) for j in c['constraints']]
            except KeyError:
                constraints = False
            try:
                derived = [tex_safe(j) for j in c['derived']]
            except KeyError:
                derived = False

            next = t.render(coreitems=coreitems,
                            name=name,
                            caption=caption,
                            constraints=constraints,
                            properties=properties,
                            members=members,
                            derived=derived,
                            label=k.replace('_',''))
            content += next

    doc = d.render(content=content, version=Factory.ontology.full_version)
    return doc


class TestLatexFile(unittest.TestCase):

    def test_makedoc(self):
        doc = make_documentation()
        with open('ontology_documentation.tex', 'w') as f:
            f.write(doc)

if __name__=="__main__":
    unittest.main()
